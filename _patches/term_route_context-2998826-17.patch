diff --git a/core/modules/taxonomy/src/ContextProvider/TermRouteContext.php b/core/modules/taxonomy/src/ContextProvider/TermRouteContext.php
new file mode 100644
index 0000000000..ecd4883bdd
--- /dev/null
+++ b/core/modules/taxonomy/src/ContextProvider/TermRouteContext.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace Drupal\taxonomy\ContextProvider;
+
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Plugin\Context\Context;
+use Drupal\Core\Plugin\Context\EntityContext;
+use Drupal\Core\Plugin\Context\EntityContextDefinition;
+use Drupal\Core\Plugin\Context\ContextProviderInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+
+/**
+ * Sets the current taxonomy term as a context on taxonomy term routes.
+ */
+class TermRouteContext implements ContextProviderInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The route match object.
+   *
+   * @var \Drupal\Core\Routing\RouteMatchInterface
+   */
+  protected $routeMatch;
+
+  /**
+   * Constructs a new TermRouteContext.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   The route match object.
+   */
+  public function __construct(RouteMatchInterface $route_match) {
+    $this->routeMatch = $route_match;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getRuntimeContexts(array $unqualified_context_ids) {
+    $result = [];
+    $context_definition = EntityContextDefinition::create('taxonomy_term')->setRequired(FALSE);
+    $value = NULL;
+    if (($route_object = $this->routeMatch->getRouteObject()) && ($route_contexts = $route_object->getOption('parameters')) && isset($route_contexts['taxonomy_term'])) {
+      if ($term = $this->routeMatch->getParameter('taxonomy_term')) {
+        $value = $term;
+      }
+    }
+
+    $cacheability = new CacheableMetadata();
+    $cacheability->setCacheContexts(['route']);
+
+    $context = new Context($context_definition, $value);
+    $context->addCacheableDependency($cacheability);
+    $result['term'] = $context;
+
+    return $result;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getAvailableContexts() {
+    $context = EntityContext::fromEntityTypeId('taxonomy_term', $this->t('Term from URL'));
+
+    return ['term' => $context];
+  }
+
+}
diff --git a/core/modules/taxonomy/taxonomy.services.yml b/core/modules/taxonomy/taxonomy.services.yml
index a8153ed117..f717be0bd1 100644
--- a/core/modules/taxonomy/taxonomy.services.yml
+++ b/core/modules/taxonomy/taxonomy.services.yml
@@ -4,3 +4,8 @@ services:
     arguments: ['@entity.manager']
     tags:
       - { name: breadcrumb_builder, priority: 1002 }
+  taxonomy_term.taxonomy_term_route_context:
+      class: Drupal\taxonomy\ContextProvider\TermRouteContext
+      arguments: ['@current_route_match']
+      tags:
+        - { name: 'context_provider' }
